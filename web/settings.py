# -*- coding: utf-8 -*-

"""
Django settings for  project.

Generated by 'django-admin startproject' using Django 1.10.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    "users"
]

def host():
    import logging
    logging.warn("your hostname is `localhost`, are you sure? "\
    "please check settings.py")
    return "http://localhost"

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
STATIC_ROOT = os.path.join(BASE_DIR, "static/static/")

PROJECT_NAME = os.path.split(os.path.dirname(__file__))[-1]

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '_g&j@@*hs3^((^e-@ye3e#=aj3ut%2+n#yw&y6(vet-huh6_3c'

LOGIN_KEY = '\xc60\xcfK\x06\xdd\x80c'

HOST = host()

BACKEND_URL_PREFIX = "api"

# enable websocket! this module depend on `ws4redis` 
ENABLE_WEBSOCKET = False

# enable asyn and periodic task! this module depends on `celery` 
# `dill` `django-celery-beat` if set it as True
ENABLE_CELERY = False

ALLOWED_HOSTS = ['*']

WEBSOCKET_ACCEPT_ALL = True
# Application definition

WEBSOCKET_URL = "/ws/"
WS4REDIS_EXPIRE = 10
WS4REDIS_HEARTBEAT = '--PING--'
WS4REDIS_PREFIX = 'qawss'



if ENABLE_CELERY:
    INSTALLED_APPS += ["django_celery_beat",]
if ENABLE_WEBSOCKET:
    INSTALLED_APPS += ["ws4redis",]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',          
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'common.middlewares.format_response.Format',
]

ROOT_URLCONF = PROJECT_NAME + '.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                
            ]
        },
    },
]

if ENABLE_WEBSOCKET:
    WSGI_APPLICATION = 'ws4redis.django_runserver.application'
else:
    WSGI_APPLICATION = PROJECT_NAME + '.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[%(asctime)s %(module)s] %(levelname)s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/


STATIC_URL = '/static/'



SESSION_COOKIE_AGE = 60*60*12 # session cookie will expired after 12 hours

SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer' # 用于序列化json对象, 不加这句会报错, made

SESSION_COOKIE_NAME = "sessionid"

CSRF_COOKIE_SECURE = False

APPEND_SLASH = False

SESSION_SAVE_EVERY_REQUEST = True       

PERM_TABLE_NAME = "perms"

# celery config
BROKER_URL = 'redis://localhost:6379/1' 
CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'
CELERY_ACCEPT_CONTENT = ['application/json', 'dill']
CELERY_TASK_SERIALIZER = 'dill'
CELERY_RESULT_SERIALIZER = 'dill'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK = PROJECT_NAME + '.celery.task'
CELERYBEAT_SCHEDULER = PROJECT_NAME + '.DBScheduler:Scheduler'

ROUTER_FILES = PROJECT_NAME + ".router"


ERRNO_FILE = "./common/errno.json"


# vue config
# 比如说, STATICFILES_DIRS = ["/home/wangchao/web/staitc"] 当请求 uri = /static/mtl/js/index.js 时, 
# 先strip掉STATIC_URL, 得到 mtl/js/index.js. 然后就会去找 /home/wangchao/web/static/mtl/js/index.js, 
# 如果找到了, 则返回文件内容; 如果没找到, 则会去各个app的static目录下找。 
STATICFILES_DIRS = ["./static"]   # 静态资源所在的目录, 仅仅对于runserver 启动方式生效, 部署后, 静态文件交给nginx处理
INDEX_HTML_PATH = "./static/index.html"
